Part 1 - Scheme Basics
======================

Basic syntax 
------------

Scheme syntax is very simple: everything in the language is done with **s-expressions**.
(**sexp's** for short.) A simple s-expression is either one **atom** (such as a symbol, number, string),
or a series of atoms surrounded by parentheses. S-expressions can be nested to any depth 
we want. 

When we send an sexp to the interpreter to be **evaluated**, the interpreter evaluates
all nested expressions, from the inside out, ending with evaluation of the outer sexpr.
Evaluation of a parenthetical s-expr is done by calling the first atom as a function, 
with the remaining atoms passed as **parameters**, also called **arguments**. (In strict computer science
circles, there are differences between the terms "procedure" and "function", and between 
"parameter" and "argument", but we are *not* going to worry about those here, you can take
them as synonyms for now.)

.. code:: scm

  ; evaluating an sexp that calls the function bound to the symbol '+'
  ; evaluating this sexp calls the function with arguments and returns value 2
  (+ 1 1)
  s4m> 2
  
  ; post is a function, and we can pass nested sexprs to it
  ; post returns null, but prints as side effect
  (post "1 + 1 is:" (+ 1 1))
  s4m: 1 + 1 is: 2
  s4m> ()

This syntax is called **prefix notation** - functions are in the first
slot, followed by as many arguments as the function will permit.

.. code:: scm

  ; add more numbers!
  (+ 1 2 3 4)
  s4m> 10
 
Nesting is simple - just add more sexps. They are evaluated from the inside out.
 
.. code:: scm

  ;; a compound expression
  (+ 1 (* 2 (+ 3 4)))
  s4m> 15

In the above, three sexps get evaluated. First, **(+ 3 4)** evaluates to
7 by calling the + function with arguments 3 and 4, resulting in
**(+ 1 (* 2 7)))**. Next, **(* 2 7)** is evaluated by calling the * function with
arguments 2 and 7, leaving **(+ 1 14)**. Finally, the remaining sexp is evaluated 
by calling the + function with arguments 1 and 14. Each round of evaluation
calls a function, replacing the sexp with the results. 

This is critical to understand. Evaluation of an sexp calls the function
(or special form) in the first slot, with the arguments from the rest of the sexp, and nested sexps are
evaluated inside-out. 

Variables
---------

The **define** function creates a variable by binding a value to a **symbol**
in the currently executing scope. If we run define at the top level of our program,
this will be the **global scope** and this binding will be visible everywhere in our
program. (Unless it is shadowed by another binding of the same symbol, which we will 
get to later...)

.. code:: scm

  ; define a variable by binding the symbol 'a' to the value 99
  (define a 99)
  s4m> 99

This function has a **side-effect**, meaning it does something other than
just return a value. Its side effect is binding the variable. In s7 (but not all Schemes), 
define also *returns* the value that was bound. 
Which means we could, if we really wanted, do something like this:

.. code:: scm

  ; both b and a will be bound to 99
  ; not recommended, here for illustration only!
  (define b (define a 99))
  s4m> 99

Evaluation does not always mean calling a function. If we evaluate a form
that is *not* a function call, we get something back, with what that something
is depending on the form. Evaluating a basic type returns the value itself 
(no change) and evaluating a variable returns the value bound in the variable.
 
.. code:: scm

  ; evaluating a simple type like a number returns the value
  99
  s4m> 99

  (define foo 99)
  s4m> 99

  ; evaluating a variable returns the value bound to the variable
  foo
  s4m> 99

Once a variable has been created, we can assign a new value to it with the **set!** function.
It's a common Scheme convention to name functions with side-effects with a trailing exclamation mark.
In s7, set! also returns the value set. We can only set a variable that has already
been defined. In s7 (but not all Schemes), we can also set a new value on an existing variable by just
redefining.

.. code:: scm

  (define a 99)
  s4m> 99

  a
  s4m> 99

  (set! a 100)
  s4m> 100

  a
  s4m> 100
  
  (define a 101)
  s4m> 101

  a
  s4m> 101

  (set! z 999)
  s4m> ERROR unbound variable z

Functions
---------

Functions are defined using the special form **lambda**. Evaluating a lambda
form will return an anonymous function, which we can in turn bind to a variable.

The lambda form takes two **clauses**: a parameter list and a body. The parameter
list specifies the local bindings that will be active in the body of the function,
based on the arguments passed in. The body gets evaluated when we call the function,
with whatever arguments are passed in at call time substituted for the parameters. 

.. code:: scm

  ; a lambda expression that takes an argument, x, and returns x + 1
  ; it returns a lambda procedure
  (lambda (x) (+ 1 x))
  s4m> #<lambda (x)>

  ; the same, but binding the function to the symbol my-fun
  (define my-fun (lambda (x) (+ 1 x)))
  s4m> my-fun

  ; now call the function
  (my-fun 2)
  s4m> 3

  ; this means we could just nest the lambda form in order to call it
  ; but this is not very readable, so less commonly done
  ((lambda (x) (+ 1 x)) 3)
  s4m> 4

  ; a lambda form specifying a procedure with two parameters
  (define my-adder (lambda (a b) (+ a b)))
  s4m> my-adder

  (my-adder 3 4)
  s4m> 7

There is a shortcut in Scheme, (sometimes called "defun" notation, from Common Lisp), that allows
us to define functions without explictly using lambda. Under the hood,
it's exactly the same. 


.. code:: scm

  ; define a function called add-1, that adds 1 to its argument
  (define (add-1 x) (+ 1 x))
  s4m> add-1

  ; this is no different from the below
  (define add-1 (lambda (x) (+ 1 x)))

  ; in S7 we could do this, because define returns the value bound
  ; again, not recommended, but a useful illustration
  ((define (add-1 x) (+ 1 x)) 2)
  s4m> 3


Some texts only use the lambda form as it is more explicit, and thus clear what is going on. We
will use both as space can be at a premium in a Max patch!


Output in Scheme For Max
-------------------------

In Scheme for Max, we have two functions we will use all the time for output, **out** and **post**.
**out** is used to send values out the s4m object's outlets. It takes two arguments, the
outlet number, and the value to be sent out. In Scheme For Max, we call the first outlet "outlet 0".

**out** is an example of a function that is called purely for its side-effect - output a number.
We send output out a lot, so we don't necessarily want to see every value sent out showing up in the
Max console. For this reason, out returns **null**. This way, if our Scheme for Max object's **log-null**
attribute is false (the default), we will not see any console activity on a call to **out**.

In Scheme, **null** is technically the **null list**, and it's printed representation is **()**. 
We will explain why later on. For now, just know this is null, and it means "empty value".

.. code:: scm
  
  ; send the number 99 out the first outlet
  ; this function also returns the null list
  (out 0 99)

  ; pretend we set @log-null to 1
  (out 0 99)
  s4m> ()

From now on, the tutorial will not always show the returned null value, such as after
calls to post, as it does clutter up examples.

If we want so send out multiple values, so that the output is a Max list message, 
we use the **list** function: 

.. code:: scm
  
  ; send the list 1 2 3 out the first outlet
  ; the list function returns a list
  (out 0 (list 1 2 3))


The **post** function logs to the Max console. It accepts any number of arguments,
automatically converting them to string representations and putting spaces between them. It is
also being called for its side effect and so returns null. You'll see that the prompt
from post printed output is **s4m:** instead of the repl return prompt of **s4m>**

.. code:: scm
  
  ; post to console, with log-nulls set to true
  (post 1 2 3)
  s4m: 1 2 3
  s4m> ()
  
  ; post a variable
  (define a 99)
  s4m> 99

  (post "a is" a)
  s4m: a is 99
  s4m> () 
 
During development, it can be helpful to attach a **print s4m-out:** object to your outlet, giving you
all the output in your Max console while you work.

.. code:: scm
  
  ; shows return value (if @log-nulls is 1) and the printed output from our print object
  (out 0 :foobar)
  s4m> ()
  s4m-out: :foobar



Basic types
-----------
Scheme is dynamically typed, meaning that we do not have to specify in advance of what type
a variable will be, but variables do have types. 

Booleans and Predicates
^^^^^^^^^^^^^^^^^^^^^^^

In Scheme, we use **#true** and **#false** for boolean values, which can also be written as 
**#t** and **#f**.  A predicate function is a function that checks the value of an expression
against some criterion and returns a boolean. 
In Scheme, predicate functions normally have names ending in a question mark.

.. code:: scm
 
  ; make a boolean variable
  (define my-boolean #t)
  s4m> #t

  ; check if it is a boolean
  (boolean? my-boolean)
  s4m> #t


Some other useful predicates: 

.. code:: scm

  ; check if a variable is a function/procedure with procedure?
  (procedure? post)
  s4m> #t

  ; the defined? predicate checks if a symbol is a defined variable
  (defined? foo)
  s4m> #f

  (define foo 1)
  s4m> 1

  (defined? foo)
  s4m> #t

We can check whether something is null with the **null?** predicate. 

.. code:: scm
  
  ; the out function returns null, so...
  (null? (out 0 99))
  s4m> #t

As an aside, remember that null is actually *the null list*, meaning
that using the **list?** predicate on the return value will also be true:

.. code:: scm
  
  ; the out function returns null, and null is the null list, so...
  (list? (out 0 99))
  s4m> #t

  ; just for fun...
  (boolean? (list? (out 0 99)))
  s4m> #t


Numerical Types
^^^^^^^^^^^^^^^

Like most programming languages, Scheme supports integers and floats, but in Scheme, both are sub-types
of the **number** type. In Scheme, floats are **inexact numbers**, while integers are **exact numbers**.
Unlike many other languages, Schemes also support fractions as a type, which is very 
helpful in music.  
There are number of predicate functions and conversion functions for working with numeric types,
and there are some rules for automatic conversion you will want to know. The examples below provide enough to
work with in Max, and for further details you can consult various online resources. 

.. code:: scm
  
  ; make an integer
  (define x 1)
  s4m> 1

  (integer? x)
  s4m> #t

  (define y 2.0)
  s4m> 2.0
  
  ; y is not an integer
  (integer? y)
  s4m> #f

  ; y is an inexact number
  (inexact? y)
  s4m> #t

  ; but both x and y are numbers, and real numbers
  (and (number? x) (number? y)
  s4m> #t

  (and (real? x) (real? y))
  s4m> #t

  ; mixing inexacts and exacts creates other inexacts
  (/ 1 0.5)
  s4m> 2.0

  ; integer math creates fractions
  (define z (/ 3 4))
  s4m> 3/4

  ; these are still exact
  (exact? z)
  s4m> #t

  ; which we can later cast to inexact
  (exact->inexact (/ 3 4))
  s4m> 0.75

  ; exacts stay exact until mixed with inexact
  (* 1.0 (/ 3 4))
  s4m> 0.75

Because of the support for fractions, we can stay exact through a chain of operations,
only converting at the end, a vastly preferable situation for converting
tuning or timing fractions compared to languages like JavaScript or C. This
does mean that we need to be more explicit in coversions however, and so
there are some helpers in the form of **floor**, **ceiling**, and **round**.

.. code:: scm
  
  (floor 1.1)
  s4m> 1.0

  (ceiling 1.1)
  s4m> 2.0

  (round 1.5)
  s4m> 1.0

  (round 1.51)
  s4m> 2.0
  
 
Symbols
^^^^^^^
Symbols are identifiers in Scheme that can be used as the name for 
functions and variables. They can hold more characters than in most
languages, because Lisps only use whitespace and parentheses for syntax.
In Scheme, it's common to include hyphens, exclamation marks, and
questions marks in names. 

.. code:: scm
  
  ; symbols for predicates usually end in question marks 
  (define is-one? (lambda (x) (= 1 x)))

Evaluating a symbol returns the value stored at that symbol:
  
.. code:: scm

  (define answer 42)
  sm4> 42

  answer
  s4m> 42


Strings and characters
^^^^^^^^^^^^^^^^^^^^^^

Scheme also has a string type and a character type. Now strictly speaking, Max doesn't really 
do strings - to Max they are just symbols with quotation marks. 
So we won't discuss either of these in much detail, especially 
characters. A good rule of thumb in Max is to avoid strings unless you *need*
a string. In Scheme, Strings use double quotes. 

.. code:: scm
  
  (define foo "foo")
  s4m> "foo"

  (define bar "bar")
  s4m> "bar"

  ; join strings with string-append
  (string-append foo bar)
  "foobar"

s7 includes a variety of string conversion routines, which one can look 
up in the online Scheme references (Dybvig is my recommendation). 
Some of the more useful ones are:
 
.. code:: scm
  
  (number->string 1)
  s4m> "1"

  (string->number "1")
  s4m> 1
  
  ; note that string->number and number to string are smart about floats
  (string->number "1.0")
  s4m> 1.0

  ; and even fractions!
  (string->number "3/4")
  s4m> 3/4

  ; of course, there's a predicate...
  (string? (number->string 1))
  s4m> #t

We can also go back and forth between symbols and strings.

.. code:: scm
  
  ; make a symbol from a string
  (symbol "foo")
  s4m> foo
  
  ; and its predicate
  (symbol? (symbol "foo"))
  s4m> #t

  ; round and around
  (string? (symbol->string (symbol "foo")))
  s4m> #t 

There are also functions for extracting characters from strings and building
up strings, but I don't find myself using these much in Max, so we'll leave
this to the reader to explore online. That's all we'll say about strings in 
this crash course. 


.. TODO comparison with Max symbols and strings


Lists - an introduction
------------------------
Lists are the most important compound data type in Lisps, including Scheme.
So much so that Lisp originally stood for "List Processing"! We'll be
looking at lists in detail later, but right now we have a bit of a 
chicken-and-egg situation: we need to know at least a little bit about them for the
next section to make sense.

We make a list using the **list** function:

.. code:: scm
  
  ; make a list
  (list 1 2 3)
  s4m> (1 2 3)

  ; store a list in a variable
  (define l (list 1 2 3))
  s4m> (1 2 3)

We can retrieve individual members of a list by index using **list-ref**,
and we can set them using **list-set!**:

.. code:: scm
  
  ; get value of l at index 0
  (list-ref l 0)
  s4m> 1
  
  ; set value of l at index 0
  (list-set! l 0 99)
  s4m> 99

  ; eval the variable, and we get the (updated) list
  l
  s4m> (99 2 3)


In s7, we can also use what is called *applicative-syntax*, where
we use a list in the function slot of a paranthetical expression, 
and put the index in the argument slot. Note that the syntax
for set is a bit unusual, we use the syntax for getting an item
to refer to a location, and the location is the argument to **set!**.

.. code:: scm
  
  ; get value of l at index 0, applicatively
  (l 0)
  s4m> 1

  ; set using applicative syntax
  (set! (l 0) 100)
  s4m> 100
   
  l
  s4m> (100 2 3)

Lists look at first like an array in other languages, but under the hood, lists 
in Lisp are actually implemented as *linked lists*. There is a whole family
of functions for working with lists as linked-lists, and we'll get to
those soon.   

The astute reader will have noticed that the *printed representation*
we get back when evaluating a variable that holds a list (or a call
to the list function), looks an awful lot like an s-expression. In
the above example, it looks just like a call to a function called "100".
Hold that thought, it's going to become very important! 


Evaluation and quoting 
-----------------------

At this point, we are able to make variables and functions, and we know about 
basic types and lists. It's time for our first look at what make the Lisp family
of languages unusual. 

When we send an s-expression or atom to the interpreter to run, we
are asking the interpreter to *evaluate* the expression. We can
also do this explicitly using the **eval** function.  In the case 
of a basic number or string, evaluation doesn't change anything - it
returns the same value:

.. code:: scm
  
  ; send a number to the interpreter, and we get the same thing back
  99
  s4m> 99

  ; as evaluating doesn't change it, the eval function won't either
  (eval 99)
  s4m> 99)

  ; thus nesting evals of a number doesn't either  
  (eval (eval 99))
  s4m> 99

  ; strings also evaluate to themselves
  (eval "foobar")
  s4m> "foobar"

However, when we evaluate a **symbol**, the evaluation process returns that which 
the symbol *points to*. Which of course requires that either this symbol is 
either *bound* in the language, or that we have by bound it ourselves by 
defining using the symbol. 
The value pointed to could be an atomic data item, in the case of a variable, 
or a function, in the case of a function name:

.. code:: scm
  
  (define my-var 99)
  s4m> 99
  
  my-var
  s4m> 99
  
  (eval my-var)
  s4m> 99

  (define (add-1 x) (+ 1 x))
  s4m> add-1
 
  ; evaluating the symbol that points to the function returns the function
  add-1
  s4m> add-1 

  (eval add-1)
  s4m> add-1


But what if we evaluate a list? Hang on to your hats! 

.. code:: scm

  ; evaluate a list
  (eval (list 1 2 3))
  s4m> Error; attempt to apply an integer 1 to (2 3) in (1 2 3)?

We get an error message about "applying an integer", giving us a clue
what's going on. Let's try that again, but instead of the just using the list function,
we will add the use of the symbol function, which we recall creates a symbol from a string:

.. code:: scm

  ; make the symbol post, from a string 
  (symbol "post")
  s4m> post

  ; make a list, starting with the symbol 
  (list (symbol "post") 1 2 3)
  s4m> (post 1 2 3)

  ; evaluate this list, and we see we have called the post function
  (eval (list (symbol "post") 1 2 3))
  s4m: 1 2 3
  s4m> ()

  ; or more concisely ...
  (eval (list post 1 2 3))
  s4m: 1 2 3
  s4m> ()

Now we can see what is going on. Evaluating a list **is** the same as calling
a function. Literally the same. The first element of the list is taken as indicating
a function, and the rest are its arguments. Scheme syntax consists of lists.
We can build them with functions or special forms, and we can call them as functions
with eval. 

Eval has a counterpart that does the opposite: **quote**. When we use
quote, we tell the interpreter *to skip* evaluation of something that it would otherwise
evaluate. In a normal function call, expressions used as arguments are evaluated
*prior* to the function call, and the values returned are passed to the function 
as arguments. For example: 

.. code:: scm

  ; define a function that prints its argument
  (define (my-post x) (post "in my-post, x is:" x))
  s4m> my-post

  ; my-post gets passed the value returned by evaluating (+ 1 2)
  (my-post (+ 1 2))
  s4m: in my-post, x is: 3
  s4m> ()

If we use **quote**, we tell the interpreter not to evaluate the expression and 
use the result as x, but rather to pass the expression *itself*, as code, in as a 
argument:

.. code:: scm

  (my-post (quote (+ 1 2)))
  s4m: in my-post, x is: (+ 1 2)
  s4m> ()

This is used so frequently in Lisps that is has a special shortcut syntax, the 
single quote character:

.. code:: scm

  (my-post '(+ 1 2) )
  s4m: in my-post, x is: (+ 1 2)
  s4m> ()

When we use the single-quote, it indicates that the rest of the immediately
following s-expression should be used as it is *written in code*, not as it would *evaluate*.
If we use it in front of a parenthetical expression, it thus returns a list, instead of
calling a function:

.. code:: scm

  ; this returns the result of calling + with the args 1 and 2
  (+ 1 2)
  s4m> 3

  ; whereas this returns a list, the first element of which is +
  '(+ 1 2)
  s4m> (+ 1 2)
  

This means quote is also a shortcut for making lists:

.. code:: scm

  (define l '(+ 1 2 3))
  s4m> (+ 1 2 3)

  l
  s4m> (+ 1 2 3)

  ; now call that list as a function
  (eval l)
  s4m> 6
 
We can also use quote in front of a symbol to indicate that we
want the *symbol*, not the value at which the symbol
points. This will work even if the symbol has not been used
to define a variable.

.. code:: scm

  ; make a list of symbols a b c
  (list 'a 'b 'c)
  s4m> (a b c)

  ; which is precisely equivalent to quoting the whole expression
  '(list a b c)
  s4m> (a b c)

  ; we could evaluate this, which will work if a b c are defined 
  ; and a is function, but be an error if they are undefined
  (eval '(a b c))
  s4m> Error: unbound variable a in (a b c)

  ; an example that works
  (define foo 99)
  (eval '(post foo))
  s4m: 99
  s4m> ()


Quote and eval are opposites, so we can nest them as much as we want:
  
.. code:: scm


  (eval '(post "hello world"))
  s4m> hello world

  (eval (quote (eval '(post "hello world"))))
  s4m> hello world 
 

NEXT: symbols in Max, why it matters
    
 
Keywords
--------

Some Lisp dialects, including s7, have **keywords**. A keyword is a symbol that
starts with a colon and *always evaluates to itself*. A keyword can not be bound
to anything other than itself - it can't be the name of a variable or function. 
In this way, it acts like a simple type, such as
a string or number.  This also means a variable can hold a keyword, but a keyword can't be a variable.

When we get to hash-tables and dictionaries, you'll see that keywords are commonly
used as keys. Conveniently, Max will let us use them in many places as well, including
table and dict names.

.. code:: scm
  
  ; evaluating a keyword has no change
  ; much like evaluating a simple type
  :my-keyword
  s4m> :my-keyword

  (define var-holding-a-keyword :my-keyword)
  s4m> :my-keyword

  (eval var-holding-a-keyword)
  s4m> :my-keyword

  ; but no using them as variable names!
  (define :my-keyword 99)
  s4m> Error: keywords are constants 

We will use quoting and evaluation a lot in Max, so keywords are very helpful. We can see
at a glance that a symbol starting with a colon is a keyword, no matter the context. 
It doesn't matter if we're not sure whether it will get evaluated, because evaluation
won't change anything.

Lists, in more depth
--------------------

.. TODO clarify that operations make new lists

As we previously discussed, under the hood, Lips lists are *linked-lists*.
In the computer memory, every cell in a list includes
a value, and a pointer to the next item. The last item in a list has a pointer
to a hidden cell that holds the **null list**. So if we look at a list of three
elements, **'(1 2 3)**, there are three cells with numbers and pointers, and
one hidden cell with the null list, to which the third cell's pointer points. Or
another way of thinking of it is that there are three cells, the last of which
points to the null list, which is a special case.

In this section we will look briefly at the classical Lisp list functions. 
I will admit these Lisp list functions have bizarre names: **car**, **cdr**, **cons**, etc.
While these names seem annoying at first, they have stuck around
as they are easy to type, and will become second nature pretty quickly.
(They originally come from operating instruction names on very old IBM computers!)

We can get the first item of a list using the **car** function, and
we can get the *rest* of the list, by using the **cdr** function. We can think of
the combination of car and cdr as taking off the head of the list, which leaves us
with one single item (the car) and the remaining linked list (the cdr). Thus cdr,
if called on a proper list, always returns a list. Though the list it returns
could be the null list, if the head was the last proper item. 
An example is worth a thousand words here:

.. code:: scm
  
  ; a list
  (define l (list 1 2 3))
  s4m> (1 2 3)

  ; get the car of l
  (car l)
  s4m> 1

  ; get the cdr of l, it's always a list
  (cdr l)
  s4m> (2 3)

Because cdr returns a list, we can get the cdr of a cdr - this
is like chopping off the head twice - and we still get a list: 

.. code:: scm
  
  ; get the cdr of cdr of l
  (cdr (cdr l))
  s4m> (3)

  ; note the above is a *list* with 3, not 3 itself!
  
  ; the very last cdr is the null list
  (cdr (cdr (cdr l)))
  s4m> ()

  ; which can be checked with the null? predicate
  (null? (cdr (cdr (cdr l))))
  s4m> #t

  ; but is also still a list!
  (list? (cdr (cdr (cdr l))))
  s4m> #t

So it's important to remember that a proper list is a set of value/pointer entries, where
the last one points to the null list. The value-pointer pairs
have a special name: **cons cells**.

In addition to making lists with the list function, we can use the **cons** function.
The list function does the magic for us, while **cons** involves us in the
underlying linked-list. We use cons to add a new cons cell by passing in
an item, and a list that our new cell should link to.

.. code:: scm
 
  ; extend our list at the front 
  (cons 0 (list 1 2 3))
  s4m> (0 1 2 3)

Note that cons *makes a new list*. This is an important distinction. Making
a new list by adding a cell to the head doesn't change an old list starting
at a different head:

.. code:: scm
 
  (define list-a (1 2 3))
  s4m> (1 2 3)

  (define list-b (cons 0 list-a))
  s4m> (0 1 2 3)

  list-a
  s4m> (1 2 3)

  list-b 
  s4m> (0 1 2 3)

In the above example, the cdr of list-b *is* list-a.

To make a list from scratch with cons, we must backwards, starting
with the null list. And we make the null list by quoting the printed representation
of an empty list, **'()**.

.. code:: scm

  (null? '())
  s4m> #t

  ; make a list by cons'ing to the null list
  (cons 3 '())
  s4m> (3)

  ; make a list by cons'ing 3 times
  (cons 1 (cons 2 (cons 3 '())))
  s4m> (1 2 3)

If we want to add to the end of a list, we need to use the **append** function,
which takes multiple lists as arguments returns a new list consisting
of the joined argument lists. This means that, unlike
cons, the item to be added needs to itself be a list. Like cons,
the result is a new list, and the original lists are unchanged.

.. code:: scm

  ; make a list, by joining two lists
  (append (list 1 2 3) (list 4 5 6))
  s4m> (1 2 3 4 5 6)

  ; add one item to a list
  (define l (list 1 2 3)
  s4m> (1 2 3)

  (append l (list 4))
  s4m> (1 2 3 4)

  ; note that l is unchanged!
  l
  s4m> (1 2 3) 

  ; or with quote
  (append l '(5))
  s4m> (1 2 3 4 5)

Append can have as many arguments as you want

.. code:: scm

  (append (list 1 2) (list 3 4) (list 5 6))
  s4m> (1 2 3 4 5 6)


Note that if you call append with a final element that is *not* a list,
you won't get an error... but you also won't get a proper list. This is
because the final item is an atomic value instead of a value/pointer pair.

.. code:: scm

  (append (list 1 2) 3)
  s4m> (1 2 . 4)

The dot before 4 indicates that the list stopped being a proper list
at the third item. Improper lists are used in various places, but most typically
as pairs, also called *dotted pairs*. We get them when we use cons, *without* ending our chain
with the null list:

.. code:: scm

  ; consing to an atomic value produces a dotted pair
  (define my-pair (cons 1 2))
  s4m> (1 . 2) 

Under the hood, a dotted pair consists of two cells: the first
has a value and a pointer to the next cell, and the second has only a value.
This means we can use car and cdr, but there is no cdr of the second element.

.. code:: scm

  ; consing to an atomic value produces a dotted pair
  (define my-pair (cons 1 2))
  s4m> (1 . 2) 

  (car my-pair)
  s4m> 1

  (cdr my-pair)
  s4m> 2

  (cdr (cdr my-pair))
  s4m> Error: cdr argument 2 is an integer, but should be a pair.

Dotted-pairs and improper lists are important to understand as you'll
use them when looping through data structures such as association
lists and hash-tables, both of which have pairs of key and value.

List accessor shortcuts
^^^^^^^^^^^^^^^^^^^^^^^

Finally, and these gets almost silly but are convenient, there
are shortcuts for combinations of car and cdr that are useful
when working with nested lists. These can always be replaced
by nested combinations of car and cdr, so you don't need to know
them. But you are quite likely to see them in other lisp code,
so it's worth knowing they exist, and they can make some code more
readable (or at least, to someone who knows these oddball functions!).

.. code:: scm

  ; car of nested list
  (car (list (list 0 1) (list 2 3) (list 4 5)))
  s4m> (0 1)

  ; cdr of nested list
  (cdr (list (list 0 1) (list 2 3) (list 4 5)))
  s4m> ((2 3) (4 5))

  ; caar gets the car of the car
  (caar (list (list 0 1) (list 2 3) (list 4 5)))
  s4m> 0

  ; cdar gets the cdr, of the car - which is a list
  (cdar (list (list 0 1) (list 2 3) (list 4 5)))
  s4m> (1)

  ; cadr gets the car, of the cdr 
  ; aka the first item of the cdr of the outer list 
  (cadr (list (list 0 1) (list 2 3) (list 4 5)))
  s4m> (2 3)

  ; cddr gets the cdr of the cdr, which is a list of lists  
  (cddr (list (list 0 1) (list 2 3) (list 4 5)))
  s4m> ((4 5))

This continues on to 5 letter combinations, like *cadar*, and
honestly, you don't need to know these. But as you may well encounter
code with functions consisting of strings of c,a,d, and r, know
you'll know what you're seeing.

Optional function arguments
--------------------------------------------------------------------------------

Know that we know about lists, we can use them for creating functions
that can be called with a variable number of arguments. (Also known as "multi-arity 
functions" if you want to talk fancy computer science lingo!)
This is done by using dotted notation in the function argument, which will
put any arguments past the explicitly named arguments into a list. This list will be
the null list if no additional arguments are given:

  
.. code:: scm

  ; one mandatory argument x, and 0 or more optionals 
  ; the list 'args' 
  (define (my-fun x . args)
    (post "called with" (length args) "optional args")
    (post "optional args:" args))
  s4m> my-fun

  (my-fun 1)
  s4m: called with 0 optional args
  s4m: optional args: ()
  s4m> '() 

  (my-fun 1 2 3)
  s4m: called with 2 optional args
  s4m: optional args: (2 3)
  s4m> '() 


This can be done with lambda as well, but lambda has an additional option.
If the argument list for a lambda is only one symbol, this symbol will be 
bound to a list of all the arguments.

.. code:: scm

  ; a lambda that bundles all its args into a list
  (define my-lambda (lambda args (post "args:" args)))
  s4m> my-lambda
   
  (my-lambda 1 2 3)
  s4m: args: (1 2 3)
  s4m> '() 


.. TODO keyword arguments and default value args

s7 Scheme borrows heavily from Common Lisp, and includes two non-standard special forms, 
**define*** and **lambda***, that give us the ability to use *keyword arguments* with
default values in our function definitions. We do this by using lists of key and default
value in place of arguments. To call the function with a keyword argument, we pass in a
keyword and a value pair for that argument. This is most easily explained with the example
below, taken straight from the s7 documentation: 

.. code:: scm

  ; a function with one required argument, a, and two optional
  ; keyword args, b & c, with default values of 32 and "hi"
  (define* (hi a (b 32) (c "hi")) 
    ; returns a list of the arguments
    (list a b c))
  s4m> hi

  ; call hi with only one argument and we get the defaults
  (hi 99)
  s4m> (99 32 "hi")

  ; call hi with three arguments, and we use them all
  (hi 99 88 77)
  s4m> (99 88 77)

  ; call hi with one argument and one keyword argument
  (hi 99 :c 77)
  s4m> (99 32 77)


Vectors 
--------------------------------------------------------------------------------

Lists do have some disadvantages. Linked lists need to be traversed to get to their 
contents, which means that accessing elements deep in a long list can be slow. And
adding items to the end of a list requires copying the entire list with append.
In music situations, we often need to access anywhere in a sequential data structure,
or add items at the end of a table, so for these types of cases, a more appropriate type is the **vector**.
Like lists, vectors can hold any data type, and can hold multiple data types within
a vector. If we want to model Max data that would be in a buffer
or table in Max, the vector is likely what we want.

Note that the printed representation of a vector starts with **#** to differentiate
it from a list.

.. code:: scm
  
  ; create a vector, containing 1 2 3 4
  (define v (vector 10 11 12 13))
  s4m> #(10 11 12 13)

  ; get its length
  (vector-length v)
  s4m> 4

  ; is it really a vector?
  (vector? v)
  s4m> #t

  ; access an element
  (vector-ref v 2)
  s4m> 12

  ; or with applicative syntax
  (v 0) 
  s4m> 10

  ; set with vector-set!
  (vector-set! v 0 99)
  s4m> 99

  v
  s4m> (99 11 12 13)
  
  ; or with applicative syntax
  (set! (v 0) 100)
  s4m> 100

  ; make a vector using quote and the # sign
  (define v '#(0 1 2 3))
  s4m> #(0 1 2 3)

Note that Max only has a list type for messages, so when we cross the Max to Scheme
boundary and vice versa, it's worth thinking about which type is appropriate. 
Vectors can be converted to and from lists easily, and S4M will use vectors instead
of lists in places where that makes sense. For example, in reading a Max dictionary into
Scheme, arrays in the dictionary will be converted to vectors instead of Scheme lists.
And s4m has functions for copying from tables and buffers to vectors, and vice versa.
We won't cover those here, but they are detailed in the s4m documentation.

.. code:: scm
  
  ; conversions
  (vector->list '#(0 1 2 3))
  s4m> (0 1 2 3)

  (list->vector '(0 1 2 3))
  s4m> #(0 1 2 3)
  
We can also make a vectors without specifying first what they will hold with 
**make-vector**:

.. code:: scm
  
  ; make a 4 point vector
  (make-vector 4)
  s4m> #( #<unspecified> #<unspecified> #<unspecified> #<unspecified> )

  ; this is more useful if we pass a starting value
  (make-vector 4 0)
  s4m> #(0 0 0 0)


.. TODO subvectors, but it appears to be busted!!!
  looking this And we can copy parts of a vector using subvector, passing in
  starting and ending indexes:
  
  .. code:: scm
    
    (define v (vector 1 2 3 4))
    s4m> #(1 2 3 4)
  
    (define v2 (subvector v 2 3))


s7 supports multi-dimensional vectors. We create these by passing
a list to make vector where the vector size argument goes. The lists
specifies the size in as many dimensions as we want.

 
.. code:: scm
  
  ; make a 2 x 3 vector, initialized to 0
  (define v2x3 (make-vector (list 2 3) 0))
  s4m> #2d((0 0 0) (0 0 0))

  ; read from the vector
  (v2x3 1 2)
  s4m> 0  

  ; set with applicative syntax
  (set! (v2x3 1 2) 99)
  s4m> 99

  v2x3 
  s4m> #2d((0 0 0) (0 0 99))

 
s7 has quite a few interesting additional vector functions, especially around
multi-dimensional vectors, that you can read about on the official s7 page.

.. TODO check what happens if we output a vector...


Hash-Tables
--------------------------------------------------------------------------------
Hash-tables are key-value stores, similar to dictionaries in Python or JavaScript.
A key can be anything we'd like, but it's most common to use a keyword as a key,
or barring that, a symbol. 

.. code:: scm
  
  ;; create a hash-table, with keys :a and :b
  (define my-hash (hash-table :a 1 :b 2)
  s4m> (hash-table :a 1 :b 2)

  ;; read value at :a
  (hash-table-ref my-hash :a)
  s4m> 1

  ;; set value at :b
  (hash-table-set! my-hash :b 99)
  s4m> 99

Asking for a value that is not in a hash-table returns **#f**, and we can remove
an item from a hash-table by storing **#f** at the key. We can put a new item
in the hash-table by setting it's value with a key.

.. code:: scm
  
  ;; ask for a value not in our hash
  (hash-table-ref my-hash :c)
  s4m> #f

  ;; add :c entry
  (hash-table-set! my-hash :c 99)
  s4m> 99

  ;; delete entry :b
  (hash-table-set! my-hash :b #f)
  s4m> #f  

  ;; inspect our hash now, b is now gone
  my-hash
  s4m> (hash-table :a 1 :c 99)

As noted earlier, s7 Scheme supports *applicative syntax* for compound data types, 
and this works for hash-tables too, allowing us to get a value from a hash-table by 
calling the hash-table as a function with the key as an argument

.. code:: scm
  
  ; get :a, calling my-hash like a function
  (my-hash :a)
  s4m> 1

As with lists, calling the hash-table with a key gives us a memory location, 
and we can thus also use this with **set!**:

.. code:: scm
  
  ; set :a, with applicative syntax
  (set! (my-hash :a) 42)
  s4m> 42

Hash-tables can be nested.

.. code:: scm
  
  (define deep-hash (hash-table :a 1 :b (hash-table :c 3 :d 4)))
  s4m> (hash-table :a 1 :b (hash-table :c 3 :d 4))

Applicative syntax is very helpful for nested hash-tables. Note
that this syntax only works for applicative syntax, *not* for 
**hash-table-ref**:

.. code:: scm
  
  :get contents of :c, at contents of :b
  (deep-hash :b :c)
  s4m> 3

We can set this way too:

.. code:: scm
  
  :set :b :c
  (set! (deep-hash :b :c) 99)
  s4m> 99
 
Be aware though, that trying to use a chain of keys is an error past the first
non-existent key, for either getting or setting:

.. code:: scm
  
  (define deep-hash (hash-table :a 1 :b (hash-table :c 3 :d 4)))
  s4m> (hash-table :a 1 :b (hash-table :c 3 :d 4))
  
  (deep-hash :z)
  s4m> #f

  (deep-hash :a :z)
  s4m> #f

  (deep-hash :z :x)
  s4m> Error....

  (set! (deep-hash :z :y :x))
  s4m> Error....


.. TODO discuss output

.. TODO discuss max conversion

.. TODO testing equality with hashtables

.. TODO in later section, looping through a hash-table (needs to be after discussing pairs)

If we stick to simple types as keys (numbers, symbols, 
keywords), we can convert hash-tables to Max dictionaries and vice versa, writing
and reading from Max dictionaries. See the Scheme For Max documentation for details
on these functions.


Branching with if  
-----------------

In Scheme, we typically branch using one of two special forms: **if** and **cond**.
These are both *special forms* - they look like function calls but are not
evaluated the same way as functions. The **if** special form takes
three clauses. The first is the **predicate**, that which is tested to determine
which branch we take. The second is the expression that is evaluated and returned if the predicate
evaluates to true. And the third is the expression that is evaluated and returned if the predicate fails.
Thus the value returned by an if expression is the value of evaluating either the first or second result clause.
These clauses can be either simple values, or s-expressions that are evaluated to
return a value. The reason **if** is a special form is that the s-expressions
for the clauses *only* evaluate if that clause is to be returned. 

.. code:: scm

  ;; return 99 if test-var is 33, else return 66
  (define test-var 99)
  s4m> 99
  (if (= 99 test-var) 33 66)
  s4m> 33  

  ;; using the above to set a variable
  (set! my-var (if (= 99 test-var) 33 66))
  s4m> 33

  ;; an if statement that returns the results of s-exp evaluation
  (if (= 99 test-var)   
        (+ 32 1) 
        (+ 66 4))
  s4m> 33

Grouping statements with begin
------------------------------
 
So far, if looks just like a function. The fact that it is not a function
is illustrated if we put side effects in our two clauses. If we want to
add a side effect to a clause that will return a value, we can enclose
child expressions in a **begin** statement. All expressions in the body
of the begin are evaluated, but only the last expression is returned.

.. code:: scm

  (begin 1 2 3)
  s4m> 3

  ;; an if statement that returns the results of s-exp evaluation
  (if (= 1 1)   
        (begin (post "first clause!") (+ 32 1))     
        (begin (post "second clause!") (+ 66 4)))
  s4m: first clause!
  s4m> 33

When we run the above, we see that our console only shows
the output from the first clause. If **if** was a function, we would
see the output from both clauses, because of the fact that 
expressions are evaluated from the inside out. The fact that **if**
breaks the rules of normal function execution is what makes it a special form.

We don't *need* to use a begin statement, we could just put side
effect expressions in the slots, as long as we have made sure that
it's ok that the entire **if** form evaluates to whatever is
returned in the clause (i.e. the null list, potentially).

In S7, we can skip the final clause in an if statement, in which case
the return value of the if is **unspecified** if the predicate fails.

.. code:: scm

  ;; if var = 1, if evaluates to null, else to unspecified
  (define var 2)
  (if (= var 1)   
    (post "first clause!")) ;post returns null, so the if will too
  s4m> <unspecified>
        

This is a good time to discuss predicates and truth in Scheme, because it's a
bit different from what you may be used to other languages. 

**In Scheme, only #false is false**.

Repeat that three times. False can be expressed as either **#f** or **#false**, 
but nothing else ever equals false. Not zero (like C), not the null list 
(like Common Lisp), not an empty data structure. Nothing except **#false**!

.. code:: scm

  ;; only false is false! 
  (if 0
    (post "I post!")
    (post "but I don't, because I never get evaluated!") )   

This is useful in Max, because Max has no notion of boolean True or False. 
In Max, we express booleans with 1 or 0. Which means that we can indicate
an *invalid* Max value using Scheme's #false, and we can test
for a valid (or existing) value by using the value in a predicate. This
will come in handy when we get to dictionaries and hash-tables.

Scheme has many predicate functions which returns #f if they fail, and end in a **?**. 
For example, if we want to test whether a value is the **null list** (an empty list), 
we can use the **null?** predicate.

.. code:: scm

  ;; if var is the null list, post
  (if (null? var)
    (post "Var is the null list."))

We've seen some of these already, but some other useful predicates are 
**defined?**, **procedure?**, **symbol?**, **number?**, **list?**, **keyword?**.

.. TODO: link to a list of S7 built in predicates 
  
It is idiomatic Scheme to name your own predicates similarly.
Not all Scheme implementations have the same predicates built in,
so if you look up a predicate online, you probably want to test it
in the REPL to make sure it's in S74, or add it to your base file.


Testing equality
----------------
Testing equality in Scheme is a bit different than you might be used to in other languages
as well. 

Numeric equality is tested with **=**, but note that we do not have
a question mark. Types of numbers (integers, floats, fractions) will be properly cast
to each other:

.. code:: scm

  ; testing numbers for equality
  (= 1 1.0)
  #t
  (= 1 2/2)
  #t
  (define a 1)
  (= a 1.0)
  #t

Testing whether non-numeric values are the same can be done with **eqv?**. This
tests whether the pointers point to *the same thing*.

.. code:: scm

  ; two vars to the same list are equivalent
  (define a (list 1 2 3))
  (define a-alias a)
  (eqv? a a-alis)
  #t

  ; but not equivalent to some other list with the same values
  (eqv? a (list 1 2 3)
  #f

  ; this works for functions and symbols too
  (define var-pointing-to-post post)
  (eqv? var-pointing-to-post post)
  #t  
  (define the-sym 'my-symbol)
  (eqv? the-sym 'my-symbol)
  #t
  (eqv? 'my-symbol 'my-symbol)
  #t

  ; simple types are equivalent only if no cast is involved
  (eqv? 1 1)
  #t
  (eqv? 1 1.0)
  #f
   
Testing whether compound types are the same, element by element, can
be done with **equal?**. This tests the *contents* of the compound
type, not the pointers.

.. code:: scm

  ; test a list 
  (equal? (list 1 2 3) (list 1 2 3))
  #t
  (define l1 (list 1 2 3))
  (define l2 (list 1 2 3))
  ; their contents are the same
  (equal? l1 l2)
  #t
  ; but they don't point to the same address in memory
  (eqv? l1 l2)
  #f 

  ; this works for strings, symbols, and keywords too
  (equal? "foo" "foo")
  #t
  (equal? 'foo 'foo)
  #t
  (define keyfoo :foo)
  (equal? keyfoo :foo)

There is one more variant, **eq?**. In S7, **eq?** is almost
entirely the same as **eqv?**, but this is not always the case
in all Scheme implementations. For the most part, in S7 you can
just use **eq?** and **eqv?** interchangeably. Different implementations
vary in their treatment of the empty list (the "null list"), which
we will cover in detail later.

.. code:: scm

  ; is the null list the same as the null list?
  (eq? (list) (list))
  ; s7 says yes! (not all do)
  #t
  (eqv? (list) (list))
  #t

When in doubt, test your equality checks in the repl! But in general,
numeric equivalence uses **=**, non-numeric and compound type equality uses 
**equal?**, and pointer comparison uses **eq?** and/or **eqv?**.

Logical operators: and, or, not
-------------------------------

Testing complex conditions often requires logical operators, for which Scheme
provides us **and**, **or**, and **not**. 

.. code:: scm

  ; and returns true only if all predicates return true
  (and (= 1 1) (> 2 1) (< 1 2))
  s4m> #t

  ; or returns true if any return true
  (or (= 1 2) (= 1 1))
  s4m> #t

  ; not returns the negation of a boolean
  (not (or (= 1 2) (= 1 1)))
  s4m> #f

These are *special forms*, not regular functions, meaning that evaluation doesn't 
follow the regular function evaluation rules of evaluating all subexpressions and
passing the *results* in as arguments. Rather, these *short-circuit*. This can
be useful if we want to evaluate some expressions only if previous expressions
have returned either true or false.  Remember, in a boolean context, only
#false is #false! 

.. code:: scm

  ; evaluate the second expression only if the first is true
  ; note: the return value is from the last evaluated expression
  (and (= 1 0) (post "I ran!"))
  s4m> #f

If **and** were a function, we would see our post statement running regardless
of the result of the first expression, but it only excecutes if all expressions
return a non-false value:

.. code:: scm

  (and (= 1 1) (post "I ran!"))
  s4m: I ran!
  s4m> ()

  ; add another non-false expression and it will be the return value

  (and (= 1 1) (post "I ran!") 42)
  s4m: I ran!
  s4m> 42

This can be used with **or** as well, with expressions evaluating 
until one of them returns true. This can be a convenient way to
make something happen if a previous something returns false. For
example, we know that a hash-table returns false if asked for a non-existent
key, so this can be used to create a fall-back value 

  
.. code:: scm
  (define h (hash-table :a 1 :b 2))
  s4m> (hash-table :b 2 :a 1)
  
  ; get the value at a key, or some fall-back value
  (or (h :a) 99)
  s4m> 1
  
  (or (h :c) 99)
  s4m> 99


Branching with cond
-------------------

The **cond** special form allows us to provide a series of predicate
and result pairs. Evaluation stops when the first predicate passes. When
combined with predicates and logical operators, this gives us everything
we need to implement complex control flow.

.. code:: scm

  ;; return some numbers for several values of x
  (cond 
    ((= x 1) (+ 9 x))
    ((= x 2) (+ 8 x))
    ((= x 3) (+ 7 x)))

  ;; to illustrate that these are just pairs of expressions,
  ;; here's a cond that returns 99
  (cond (#f #f) (#t 99))

If no clause succeeds, cond will return **unspecified** (at least in S7!). 
To avoid this, it is common to return **#f** in an **else** clause. Interestingly,
**else** is just a short-form for returning true - all we need
is a predicate that passes.

.. code:: scm

  ;; return 10 for several values of x, or false for unhandled instance
  (cond 
    ((= x 1) (+ 9 x))
    ((= x 2) (+ 8 x))
    (else #f))

  ;; because only false is false, this technically works too
  ;; but you won't be popular coding like this.... 
  (cond 
    ((= x 1) (+ 9 x))
    ((= x 2) (+ 8 x))
    (0 #f))



Again, if we want conditional side effects, we can use **begin**:
 
.. code:: scm

  ;; branching with side effects
  (cond 
    ((= x 1) 
      (begin 
        (post "x is 1") 
        (+ 9 x)))
    ((= x 2) 
      (begin 
        (post "x is 2") 
        (+ 8 x)))
    (else    
      (begin 
        (post "unhandled x!") 
        #f)))


Scope and the let statement
---------------------------

In computer science, 'scope' referes to where and when the binding
of a symbol to a variable or function is in effect. Scheme is
a *lexically scoped* language, allowing us to use functions and
scopes in powerful ways, some of which we will look at in this book.
To use Scheme effectively, and to take advantage of its lexical
scoping for real time interactivity in Max, we need to 
understand Scheme scoping and how to use the **let** form.

When we make definitions in scm file or send them to the interpreter 
from Max messages, bindings execute in the **global scope**, also 
refered to as the "top-level scope".  These bindings are visible in 
any other expression or function, unless shadowed by bindings local 
to the expression or function. 


.. code:: scm

  ;; make a global variable 
  (define var 99)
  s4m> 99

  ;; define a function, it can access var
  ;; if we tried to run this function prior to defining var
  ;; we'd get an error
  (define (my-fun)
    (post "var:" var)
    ; return var + 1
    (+ 1 var))
  s4m> my-fun

  (my-fun)
  s4m: var: 99
  s4m> 100

  ;; change var in the global scope & the change is visible 
  ;; in the body of the function
  (set! var 100)
  s4m> 100

  (my-fun)
  s4m: var: 100
  s4m> 101

If we change a variable from an outer scope inside a function body,
by using **set!**, this  will change the variable in the outer scope.
A common convention in Scheme is to name functions ending in an exclamation
mark if they have side-effects on external definitions. 

.. code:: scm

  ;; make a global var, var
  (define var 99)
  s4m> 99

  ;; define a function that access and mutates var
  (define (my-fun!)
    ; set outer var, and return the value
    (set! var (+ 1 var)))
  s4m> my-fun!

  (my-fun!)
  s4m> 100

  ; var has changed in the global scope
  var
  s4m> 101


Function parameters create bindings that are active in the function body,
making an inner scope. This is also called "function scope". The
function scope will have the values of the arguments passed
to the function bound to the symbols used as function parameters.

.. code:: scm

  ;; make a function with a local binding
  (define (my-fun-2 var)
    (post "var in my-fun-2:" var)
    (set! var (+ 1 var))
    (post "var in my-fun-2 now:" var)
    ; return var
    var)
  s4m> my-fun-2

  ;; call it
  (my-fun-2 42)
  s4m: var in my-fun-2: 42
  s4m: var in my-fun-2 now: 43
  s4m> 43

  ;; make a global variable with the same name, 'var'
  (define var 42)
  s4m> 42
  
  ;; call our function with it, returns 43 as before
  (my-fun-2 var)
  s4m: var in my-fun-2: 42
  s4m: var in my-fun-2 now: 43
  s4m> 43  
  
  ;; check our global var - no change!
  (post var)
  s4m: 42
  
So what's going on here? The local binding of the symbol
var in my-fun-2 is separate from the global binding;
it's a new variable that happens to have the same name. This
results in the new variable - var in the scope of my-fun-2 - 
*shadowing* the global variable. When we use **set!** inside
my-fun-2, only the local version is updated. After the 
function exits, its scope becomes inactive and the symbol
'var' will again refer to the global variable.

The **let** special form creates a local scope. It takes
an expression with a series of bindings of
symbol and value, and a body that is executed with those
bindings. The let statement returns the value of the
last expression in the body. Within the body of the let,
any bindings defined by the let's first clause will shadow
any identically named bindings in outer scopes.
Unlike a function, a let executes its body right away.

.. code:: scm

  ;; make a scope with two local bindings
  (let 
    ((a 1) (b 2)) ; bindings
    (+ a b))      ; body, does addition, returns value
  s4m> 3

  ;; the body can have many expressions
  ;; the value returned by let is the last one
  (let ((a 1) (b 2))   ; bindings
    (post "a:" a)      ; body with 3 expressions
    (post "b:" b)
    (+ a b))          
  s4m: "a:" 1
  s4m: "b:" 2
  s4m> 3

As far as scoping rules are concerned, variables defined
by a let are treated in the body of the let *exactly* the 
same way as function paramaters are treated in the body of a
function. Under the hood, they are equivalent. These two
are completely equivalent:

.. code:: scm

  ; use a let
  (let ((a 1) (b 2)) 
    (+ a b))
  s4m> 3

  ; use a lambda and call it immediately
  ((lamdba (a b)(+ a b)) 1 2)
  s4m> 3

In Scheme, a let literally *is* an immediately executed lambda. 
This is worth taking a moment to understand!


A regular let has all bindings defined at the same time,
(order not guaranteed) meaning that a binding cannot refer to a previous binding:

.. code:: scm

  ; an error, the second binding won't work!
  (let ((a 2) (b (* a a)))
    (+ a b))
 
However, we can do this if we use **let***: 

.. code:: scm

  ; OK!
  (let* ((a 2) (b (* a a)))
    (+ a b))
  s4m> 6 

Under the hood, this actually executes as two nested lets:

.. code:: scm

  (let ((a 2))
    (let ((b (* a a)))
      (+ a b)))

We can use a let in the body of a function to create temporary
variables local to a function. 

.. code:: scm

  ; define a function with an inner let
  ; the last sexpr in the let is returned by the let
  ; and thus also by my-fun
  (define (my-fun a) 
    (let ((b 1) (c 2))
      (+ a b c)))
  
  (my-fun 3)
  s4m> 6

    
The temporary scope that is created by a let (or a function) is called an *environment*.
It's a frame in memory with a series of bindings. Normally, it's destroyed
as soon as the let returns: there are no more references to the bindings
in the let, so the garbage-collector cleans up and deletes the environment. 
But if we return a function that has references to the bindings in the let, 
the environment will live on. This is called a *closure* in many languages,
and is the key to much of the power of Scheme and Lisp. You might hear this
refered to as **"let over lambda"**. 

.. code:: scm

  ; create a function inside a let, returning the function
  (define add-42
    (let ((to-add 42))
      (lambda (x) 
        (+ to-add x))))

  (add-42 3)
  s4m> 45

In the above example, the lambda function has a reference to the temporary
variable "to-add", and uses it in the body of the function. The function 
is returned from the let (it's the last expression in the let) and bound
to the name "add-42" in the define. Because we are holding on to the 
reference to the function, this means the environment lives
on after the let is finished.  The "to-add" variable
in the lambda is the let's variable, it's the variable that existed in scope
*when the lambda executed*. This is called **lexical scope**. 

Here's an example demonstrating that the scope of **to-add** in the let
is separate from global scope:

.. code:: scm

  ; make a global var, to-add
  (define to-add 1)

  ; create a function inside a let, with its own to-add variable 
  (define add-42
    (let ((to-add 42))
      (lambda (x) 
        (+ to-add x))))

  ; calling add 42 here at global scope level still uses the inner version
  (add-42 3)
  s4m> 45
  (set! to-add 2)
  
  (add-42 3)
  s4m> 45



Nesting functions and lambdas is a way to make *objects as functions*. 
These are functions that have some private state. The equivalence of lets 
and lambdas means we can intermix them freely and we have a lot of flexibility
in how we implement function objects. Let's make a function
that counts how many times it has been called:

.. code:: scm

  ; make a counter variable in a let
  (define counter-fun
    ; count is a variable private to this function
    (let ((count 0))
      ; the lambda gets returned from the let and bound to counter-fun
      (lambda () 
        ; mutate our private variable and post
        (set! count (+ 1 count))
        (post "Call" count))))
  
  (counter-fun)
  s4m: Call 1
  (counter-fun)
  s4m: Call 2

The **count** variable is private to counter-fun. We
have no other way of accessing it. 

We can also accomplish something similar with nested functions.
We could make this more sophisticated by allowing us
to specify an increment value for each count. We'll have 
a builder function make our counter: 

.. code:: scm

  ; a function that builds a counter function
  (define (build-counter increment)
    (let ((count 0))
      (lambda () 
        (set! count (+ 1 increment))
        (post "Count is now:" count))))
  
  (define counter (build-counter 2))
  
  (counter)
  s4m: Count is now: 2
  (counter)
  s4m: Count is now: 4
 
 
Finally, here is an example of the same pattern where
the function returned by the lambda, also itself returns a 
value based on the private variable:

.. code:: scm

  ; a function that builds another function and tracks calls
  (define (build-adder to-add)
    ; a local variable storing number of times we are called
    (let ((times-called 0))
      ; a lambda to return the function-object
      (lambda (x) 
        ; update the local variable and post to the console
        (set! times-called (+ 1 times-called))
        (post "I have done" times-called "additions!")
        ; return the results of our addition
        (+ x to-add))))

  (define add-3 (build-adder 3))

  (add-3 10)
  s4m: "I have done 1 additions!"
  s4m> 13

  (add-3 12)
  s4m: "I have done 2 additions!"
  s4m> 15
 

Note in the above that we did not need to explicitly 
use **to-add** in the bindings of our let. Because lets and
lambdas are equivalent in scope creation, the to-add variable
and the times-called variable will both be persisted in the 
environment that the lambda function brings back with itself. 
In a future section, we will look at how these patterns can be
used to make sophisticated and flexible object oriented systems.


Looping - (TODO)
---------------- 

